/* -*- Mode: js2; tab-width: 4; indent-tabs-mode: nil; -*-
 * vim: set ts=4 sw=4 et tw=99 ft=js:
 */

// for template strings without a tag (i.e. of the form
// `literal ${with}${possibly}${substitutions}`) we simply
// inline the spec'ed behavior of the default handler (zipping
// together the cooked values and substitutions to form the
// result.)
//
// for tagged templates: (i.e. of the form tag`literal`) we
// create a function which lazily generates the const/frozen
// callsite_id, which is a unique object containing both raw
// and cooked literal portions of the template literal.
//
// This function is invoked to get the callsiteId, which is
// then passed (along with the array of substitutions) to the
// handler named by "tag" above.
// 

import { startGenerator, intrinsic } from '../echo-util';
import * as b from '../ast-builder';
import { templateCallsite_id, templateDefaultHandlerCall_id } from '../common-ids';
import { TransformPass } from '../node-visitor';

let callsiteGen = startGenerator();
let freshCallsiteId = () => `%callsiteId_${callsiteGen()}`;


export class DesugarTemplates extends TransformPass {
    visitBlock (n, callsites) {
        callsites = [];
        n = super(n, callsites);
        // prepend the callsite generation functions (generated by desugaring tagged template expressions below)
        n.body = callsites.concat(n.body);
        return n;
    }
    
    generateCreateCallsiteIdFunc (name, quasis) {
        let raw_elements = [];
        let cooked_elements = [];
        for (let q of quasis) {
            raw_elements.push    (b.literal(q.value.raw));
            cooked_elements.push (b.literal(q.value.cooked));
        }

        let qo = b.objectExpression([b.property(b.identifier("raw"), b.arrayExpression(raw_elements)),
                                     b.property(b.identifier("cooked"), b.arrayExpression(cooked_elements))]);

        return b.functionDeclaration(b.identifier(`generate_${name}`), [],
                                     b.blockStatement([b.expressionStatement(intrinsic(templateCallsite_id, [b.literal(name), qo]))]));
    }
    
    visitTaggedTemplateExpression (n, callsites) {
        let callsiteid_func_id = freshCallsiteId();
        let callsite_func = this.generateCreateCallsiteIdFunc(callsiteid_func_id, n.quasi.quasis);
        callsites.push(callsite_func);
        let callsiteid_func_call = b.callExpression(callsite_func.id, []);
        return b.callExpression(n.tag, [callsiteid_func_call].concat(n.quasi.expressions));
    }
    
    visitTemplateLiteral (n) {
        let cooked = b.arrayExpression(n.quasis.map((q) => b.literal(q.value.cooked)));
        let substitutions = b.arrayExpression(n.expressions);
        return intrinsic(templateDefaultHandlerCall_id, [cooked, substitutions]);
    }
}
